import React, { useState } from 'react';
import {
  Box,
  Typography,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Button,
  Paper,
  Grid,
  Divider,
  IconButton,
  Chip
} from '@mui/material';
import { DatePicker, TimePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { Add as AddIcon, ExpandMore as ExpandMoreIcon } from '@mui/icons-material';

const BatchConfiguration = () => {
  const [formData, setFormData] = useState({
    sourceConnections: [
      {
        connection: 'Snowflake',
        path: 'DWH',
        dataset: 'Search dataset with multiple selection',
        count: '20/20%'
      },
      {
        connection: 'S3',
        path: '',
        dataset: 'Search dataset with multiple selection',
        count: '10'
      }
    ],
    batchName: 'Define batch name',
    batchDescription: '',
    frequency: 'One Time/ Daily/ Weekly/ monthly/QTR/Annual/Adhoc',
    triggerDay: 'Weekday\n3rd day Of Month',
    batchId: '',
    batchStartDate: new Date('2025-08-01'),
    batchStartTime: new Date('2025-08-01T01:00:00'),
    isAutoGenerated: true
  });

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSourceChange = (index, field, value) => {
    const newSources = [...formData.sourceConnections];
    newSources[index][field] = value;
    setFormData(prev => ({
      ...prev,
      sourceConnections: newSources
    }));
  };

  const addDataSource = () => {
    setFormData(prev => ({
      ...prev,
      sourceConnections: [
        ...prev.sourceConnections,
        {
          connection: '',
          path: '',
          dataset: '',
          count: ''
        }
      ]
    }));
  };

  const handleSaveDraft = () => {
    console.log('Saving draft...', formData);
  };

  const handleSubmit = () => {
    console.log('Submitting batch configuration...', formData);
  };

  const handleCancel = () => {
    console.log('Cancelling...');
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box sx={{ p: 3, backgroundColor: '#f5f5f5', minHeight: '100vh' }}>
        <Paper elevation={3} sx={{ p: 4, borderRadius: 2 }}>
          {/* Header */}
          <Box sx={{ 
            backgroundColor: '#4a7c59', 
            color: 'white', 
            py: 2, 
            px: 3, 
            borderRadius: 1, 
            mb: 4,
            textAlign: 'center'
          }}>
            <Typography variant="h5" fontWeight="bold">
              Batch Configuration
            </Typography>
          </Box>

          {/* Data Sources Section */}
          <Box sx={{ mb: 4 }}>
            {formData.sourceConnections.map((source, index) => (
              <Grid container spacing={3} key={index} sx={{ mb: 2 }}>
                <Grid item xs={12} sm={3}>
                  <FormControl fullWidth size="small">
                    <InputLabel>Source Connection</InputLabel>
                    <Select
                      value={source.connection}
                      label="Source Connection"
                      onChange={(e) => handleSourceChange(index, 'connection', e.target.value)}
                      IconComponent={ExpandMoreIcon}
                    >
                      <MenuItem value="Snowflake">Snowflake</MenuItem>
                      <MenuItem value="S3">S3</MenuItem>
                      <MenuItem value="PostgreSQL">PostgreSQL</MenuItem>
                      <MenuItem value="MySQL">MySQL</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                
                <Grid item xs={12} sm={2}>
                  <TextField
                    fullWidth
                    size="small"
                    label="Source Path"
                    value={source.path}
                    onChange={(e) => handleSourceChange(index, 'path', e.target.value)}
                  />
                </Grid>
                
                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    size="small"
                    label="Dataset Name"
                    value={source.dataset}
                    onChange={(e) => handleSourceChange(index, 'dataset', e.target.value)}
                    placeholder="Search dataset with multiple selection"
                  />
                </Grid>
                
                <Grid item xs={12} sm={3}>
                  <TextField
                    fullWidth
                    size="small"
                    label="# of Dataset /Percentage"
                    value={source.count}
                    onChange={(e) => handleSourceChange(index, 'count', e.target.value)}
                  />
                </Grid>
              </Grid>
            ))}
            
            <Button
              startIcon={<AddIcon />}
              onClick={addDataSource}
              sx={{ 
                color: '#4a7c59',
                textTransform: 'none',
                fontWeight: 'normal',
                mt: 1
              }}
            >
              Additional data source
            </Button>
          </Box>

          <Divider sx={{ my: 3 }} />

          {/* Batch Configuration Details */}
          <Grid container spacing={3}>
            {/* First Row */}
            <Grid item xs={12} sm={3}>
              <TextField
                fullWidth
                size="small"
                label="Batch Name"
                value={formData.batchName}
                onChange={(e) => handleInputChange('batchName', e.target.value)}
                placeholder="Define batch name"
              />
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                size="small"
                label="Batch Description"
                value={formData.batchDescription}
                onChange={(e) => handleInputChange('batchDescription', e.target.value)}
                multiline
                rows={2}
              />
            </Grid>
            
            <Grid item xs={12} sm={3}>
              <TextField
                fullWidth
                size="small"
                label="Frequency"
                value={formData.frequency}
                onChange={(e) => handleInputChange('frequency', e.target.value)}
                multiline
                rows={2}
              />
            </Grid>

            {/* Second Row */}
            <Grid item xs={12} sm={3}>
              <Box>
                <Typography variant="body2" color="error" sx={{ mb: 1 }}>
                  Batch ID
                </Typography>
                <TextField
                  fullWidth
                  size="small"
                  value={formData.batchId}
                  onChange={(e) => handleInputChange('batchId', e.target.value)}
                  disabled
                />
                <Typography variant="caption" color="error" sx={{ mt: 1, display: 'block' }}>
                  Autogenerated with combination of data connection, Batch Name and frequency
                </Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={3}>
              <Box>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  Batch Start Date
                </Typography>
                <DatePicker
                  value={formData.batchStartDate}
                  onChange={(newValue) => handleInputChange('batchStartDate', newValue)}
                  renderInput={(params) => <TextField {...params} fullWidth size="small" />}
                />
                <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                  This field will be enabled if Frequency are Onetime, Adhoc
                </Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={3}>
              <Box>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  Batch Start Time
                </Typography>
                <TimePicker
                  value={formData.batchStartTime}
                  onChange={(newValue) => handleInputChange('batchStartTime', newValue)}
                  renderInput={(params) => <TextField {...params} fullWidth size="small" />}
                />
                <Typography variant="caption" color="textSecondary" sx={{ mt: 1, display: 'block' }}>
                  Start time only for Onetime, Daily
                </Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={3}>
              <TextField
                fullWidth
                size="small"
                label="Trigger Day"
                value={formData.triggerDay}
                onChange={(e) => handleInputChange('triggerDay', e.target.value)}
                multiline
                rows={2}
              />
            </Grid>
          </Grid>

          {/* Action Buttons */}
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'flex-end', 
            gap: 2, 
            mt: 4 
          }}>
            <Button
              variant="outlined"
              onClick={handleCancel}
              sx={{ 
                textTransform: 'none',
                borderColor: '#ccc',
                color: '#666'
              }}
            >
              Cancel
            </Button>
            
            <Button
              variant="contained"
              onClick={handleSaveDraft}
              sx={{ 
                backgroundColor: '#4a7c59',
                textTransform: 'none',
                '&:hover': {
                  backgroundColor: '#3d6249'
                }
              }}
            >
              Save Draft
            </Button>
            
            <Button
              variant="outlined"
              onClick={handleSubmit}
              sx={{ 
                textTransform: 'none',
                borderColor: '#4a7c59',
                color: '#4a7c59',
                '&:hover': {
                  borderColor: '#3d6249',
                  backgroundColor: 'rgba(74, 124, 89, 0.1)'
                }
              }}
            >
              Submit
            </Button>
          </Box>
        </Paper>
      </Box>
    </LocalizationProvider>
  );
};

export default BatchConfiguration;
